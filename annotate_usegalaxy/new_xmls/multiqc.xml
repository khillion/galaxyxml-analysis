<tool id="multiqc" name="multiqc" version="@WRAPPER_VERSION@.0">
  <!--This tool descriptor has been annotated by ToolDog v0.3.1-->
  <description>aggregate results from bioinformatics analyses into a single report</description>
  <edam_operations>
    <edam_operation>operation_2428</edam_operation>
  </edam_operations>
  <edam_topics>
    <edam_topic>topic_3168</edam_topic>
  </edam_topics>
  <requirements>
    <requirement type="package" version="@WRAPPER_VERSION@">multiqc</requirement>
  </requirements>
  <stdio>
    <exit_code level="fatal" range="1:"/>
  </stdio>
  <version_command>@WRAPPER_VERSION@</version_command>
  <command><![CDATA[

mkdir multiqc_WDir &&

#for $i, $repeat in enumerate( $results )
    mkdir multiqc_WDir/${repeat.software}_${i} &&

    #if str($repeat.software) == "fastqc":
        ## Searches for files named "fastqc_data.txt"
        #for $k, $file in enumerate($repeat.input_file):
            mkdir multiqc_WDir/${repeat.software}_${i}/file_${k} &&
            ln -s '${file}' multiqc_WDir/fastqc_${i}/file_${k}/fastqc_data.txt &&
        #end for
    #else if str($repeat.software) == "tophat":
        ## Searches for files ending in "align_summary.txt"
        #for $file in $repeat.input_file:
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}align_summary.txt' &&
        #end for
    #else if str($repeat.software) == "bowtie2":
        ## Searches for files containing 'reads; of these;'
        #for $file in $repeat.input_file:
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}.txt' &&
        #end for
    #else if str($repeat.software) == "cutadapt":
        ## Searches for files containing 'This is cutadapt'
        #for $file in $repeat.input_file:
            cat '${file}' > 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}.txt' &&
            ## replace header for old cutadapt release
            sed -i .old 's/You are running/This is/' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}.txt' &&
        #end for
    #else if str($repeat.software) == "featurecounts":
        ## Checks for files ending in '.summary'
        #for $file in $repeat.input_file
            #if $file.metadata.column_names and $file.metadata.column_names.find(',') != -1
                echo '$file.metadata.column_names.replace(',','\t').replace('__ob__u','').replace('u__sq__','').replace('__sq__','').replace('__cb__','')' >> 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}.summary' &&
                cat '$file' >> 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}.summary' &&
            #else
                ln -s '$file' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}.summary' &&
            #end if
        #end for
    #else if str($repeat.software) == "bismark":
        ## Checks for files ending in _SE_report.txt
        #for $file in $repeat.input_file
            ln -s ${file} 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}_SE_report.txt' &&
        #end for
    #else if str($repeat.software) == "samtools":
        ## Checks for files containing 'This file was produced by samtools stats'
        #for $file in $repeat.input_file
            ln -s ${file} 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}' &&
        #end for
    #else if str($repeat.software) == "picard":
        #for $file in $repeat.input_file
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}' &&
        #end for
    #else if str($repeat.software) == "samtools_idxstats":
        ## Checks for files containing "idxstats" in the name
        #for $file in $repeat.input_file
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}_idxstats.txt' &&
        #end for
    #else if str($repeat.software) == "htseq":
        ## Checks for files containing "__too_low_aQual"
        #for $file in $repeat.input_file
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}' &&
        #end for
    #else if str($repeat.software) == "rnastar_log":
        ## Checks for files named Log.final.out
        #for $k, $file in enumerate($repeat.input_file):
            mkdir 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}' &&
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}/Log.final.out' &&
        #end for
    #else if str($repeat.software) == "rnastar_counts":
        ## Checks for files named ReadsPerGene.out.tab
        #for $k, $file in enumerate($repeat.input_file):
            mkdir 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}' &&
            ln -s '${file}' 'multiqc_WDir/${repeat.software}_${i}/${file.element_identifier}/ReadsPerGene.out.tab' &&
        #end for
    #end if
#end for

multiqc multiqc_WDir
    ]]></command>
  <inputs>
    <repeat min="1" name="results" title="Results">
      <param argument="software" help="Which tool was used generate logs?" label="Software name" name="software" type="select">
        <option value="fastqc">FastQC</option>
        <option value="cutadapt">Cutadapt/Trim Galore!</option>
        <option value="tophat">Tophat2</option>
        <option value="featurecounts">FeatureCounts (Summary file)</option>
        <option value="samtools">Samtools (Stats, Flagstat)</option>
        <option value="samtools_idxstats">Samtools (Idxstats)</option>
        <option value="picard">Picard</option>
        <option value="bismark">Bismark</option>
        <option value="bowtie2">Bowtie2</option>
        <option value="htseq">HTSeq-Count</option>
        <option value="rnastar_log">RNA STAR (log)</option>
        <option value="rnastar_counts">RNA STAR (reads per gene)</option>
      </param>
      <param argument="input_file" format="txt, tabular" help="Select input datasets" label="Result file" multiple="true" name="input_file" type="data"/>
    </repeat>
    <param argument="saveLog" checked="false" falsevalue="false" help="Save the multiQC log file to the history. This is mostly useful for debugging purposes." label="Save log file" name="saveLog" truevalue="true" type="boolean"/>
  </inputs>
  <outputs>
    <data format="html" from_work_dir="multiqc_report.html" hidden="false" label="${tool.name} on ${on_string}: Webpage" name="html_file"/>
    <data format="txt" from_work_dir="multiqc_data/multiqc.log" hidden="false" label="${tool.name} on ${on_string}: Log" name="text_file">
      <filter>saveLog</filter>
    </data>
  </outputs>
  <tests>
    <test>
      <param name="saveLog" value="True"/>
      <output compare="sim_size" delta="1000" file="report_fastqc.html" name="html_file"/>
      <output compare="sim_size" delta="1000" file="log_fastqc.txt" name="text_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_fastqc_2.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_cutadapt.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_tophat.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_bowtie2SE.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_featurecounts.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="10000" file="report_picard.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_htseq.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_rnastar_log.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_rnastar_counts.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_bismark.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_samtools.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="1000" file="report_samtools_idxstats.html" name="html_file"/>
    </test>
    <test>
      <output compare="sim_size" delta="5000" file="report_all.html" name="html_file"/>
    </test>
  </tests>
  <help><![CDATA[
**What it does**

MultiQC aggregates results from bioinformatics analyses across many samples into a single report. It takes results of multiple analyses and creates a report that can be viewed as a single beautiful web-page. It's a general use tool, perfect for summarizing the output from numerous bioinformatics tools.

**Inputs**

MultiQC takes software output summaries/logs and creates a single report from them. You need to tell the tool which software was used to generate the report. This is done using the **Software name** dropdown. At present the following Galaxy tools produce logs that can used with MultiQC. There are:

- Fastqc
- Cutadapt / Trim Galore!
- Tophat2
- FeatureCounts (summary file with the column header in the first line or as metadata)
- Samtools (stats, flagstat, dxstats)
- Picard (MarkDuplicatesMetrics, CollectGCBiasMetrics, CollectInsertSizeMetrics, CollectAlignmentSummaryMetrics, CollectRnaSeqMetrics)
- Bismark (Alignment report file)
- Bowtie2 (Metrics file)
- HTSeq-count ("no feature" file; although the "Assigned" metric is always 0)
- RNA STAR (Alignment from Log.final.out, Gene counts from ReadsPerGene.out.tab)

----

**Integrated by**

Cyril Monjeaud and Yvan Le Bras

`EnginesOn &lt;http://engineson.fr/&gt;`_ and Rennes GenOuest Bio-informatics Core Facility

    ]]></help>
  <citations>
    <citation type="doi">10.1093/bioinformatics/btw354</citation>
  </citations>
</tool>
